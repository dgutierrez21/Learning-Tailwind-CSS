Reutilización de estilos
Gestionar la duplicación y crear abstracciones reutilizables.

Tailwind fomenta un flujo de trabajo de utilidad primero, donde los diseños se implementan utilizando solo clases de utilidad de bajo nivel. Esta es una forma poderosa de evitar la abstracción prematura y los puntos débiles que la acompañan.

Pero, por supuesto, a medida que un proyecto crece, inevitablemente te encontrarás repitiendo combinaciones de utilidades comunes para recrear el mismo diseño en muchos lugares diferentes.

Por ejemplo, en la siguiente plantilla puede ver que las clases de utilidad para cada imagen de avatar se repiten cinco veces separadas:

...

¡Que no cunda el pánico! En esta guía, aprenderá sobre diferentes estrategias para reutilizar estilos en su proyecto, así como las mejores prácticas para cuándo emplear cada uno.

Edición de varios cursores
Cuando la duplicación se localiza en un grupo de elementos en un solo archivo, la forma más fácil de tratarla es usar la edición de varios cursores para seleccionar y editar rápidamente la lista de clases para cada elemento a la vez:

Te sorprendería la frecuencia con la que esto termina siendo la mejor solución. Si puede editar rápidamente todas las listas de clases duplicadas simultáneamente, no hay ningún beneficio en introducir ninguna abstracción adicional.

Bucles
Antes de asumir que va a necesitar extraer un componente o crear una clase personalizada para algo, asegúrese de que realmente lo está usando más de una vez en su plantilla.

Muchas veces, un elemento de diseño que aparece más de una vez en la página renderizada solo se crea una vez porque el marcado real se representa en un bucle.

Por ejemplo, los avatares duplicados al principio de esta guía casi seguramente se representarían en un bucle en un proyecto real:

<div>
  <div class="flex items-center space-x-2 text-base">
    <h4 class="font-semibold text-slate-900">Contributors</h4>
    <span class="rounded-full bg-slate-100 px-2 py-1 text-xs font-semibold text-slate-700">204</span>
  </div>
  <div class="mt-3 flex -space-x-2 overflow-hidden">
    {#each contributors as user}
      <img class="inline-block h-12 w-12 rounded-full ring-2 ring-white" src="{user.avatarUrl}" alt="{user.handle}"/>
    {/each}
  </div>
  <div class="mt-3 text-sm font-medium">
    <a href="#" class="text-blue-500">+ 198 others</a>
  </div>
</div>

Incluso podría reescribir el ejemplo de navegación usando un bucle o map si lo prefiere:

<nav className="flex sm:justify-center space-x-4">
  {[
    ['Home', '/dashboard'],
    ['Team', '/team'],
    ['Projects', '/projects'],
    ['Reports', '/reports'],
  ].map(([title, url]) => (
    <a href={url} className="rounded-lg px-3 py-2 text-slate-700 font-medium hover:bg-slate-100 hover:text-slate-900">{title}</a>
  ))}
</nav>

Cuando los elementos se representan en un bucle como este, la lista de clases real solo se escribe una vez, por lo que no hay ningún problema de duplicación real que resolver.

Extracción de componentes y parciales
Si necesita reutilizar algunos estilos en varios archivos, la mejor estrategia es crear un componente si está utilizando un marco front-end como React, Svelte o Vue, o una plantilla parcial si está utilizando un lenguaje de plantillas como Blade, ERB, Twig o Nunjucks.

VacationCard.vue

<template>
  <div>
    <img class="rounded" :src="img" :alt="imgAlt">
    <div class="mt-2">
      <div>
        <div class="text-xs text-slate-600 uppercase font-bold tracking-wider">{{ eyebrow }}</div>
        <div class="font-bold text-slate-700 leading-snug">
          <a :href="url" class="hover:underline">{{ title }}</a>
        </div>
        <div class="mt-2 text-sm text-slate-600">{{ pricing }}</div>
      </div>
    </div>
  </div>
</template>

<script>
  export default {
    props: ['img', 'imgAlt', 'eyebrow', 'title', 'pricing', 'url']
  }
</script>

Ahora puede usar este componente en tantos lugares como desee, sin dejar de tener una única fuente de verdad para los estilos para que puedan actualizarse fácilmente juntos en un solo lugar.