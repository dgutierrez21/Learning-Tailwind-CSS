Funciones y directivas
Una referencia para las funciones y directivas personalizadas que Tailwind expone a su CSS.

Directivas
Las directivas son reglas de referencia personalizadas específicas de Tailwind que puedes usar en tu CSS y que ofrecen una funcionalidad especial para los proyectos CSS de Tailwind.

@tailwind
Utiliza la directiva @tailwind para insertar la base, los componentes, utilities y components estilos de variants Tailwind en su CSS.

/**
 * Esto inyecta los estilos base de Tailwind y cualquier estilo base registrado por
 * plugins.
 */
@tailwind base;

/**
 * Esto inyecta las clases componentes de Tailwind y cualquier clase componente
 * registradas por plugins.
 */
 @tailwind components;

/**
 * Esto inyecta las clases de utilidad de Tailwind y cualquier clase de utilidad registrada por plugins.
 * por plugins.
 */
 @tailwind utilities;

/**
 * Usa esta directiva para controlar donde Tailwind inyecta el hover, focus,
 * responsive, dark mode, y otras variantes de cada clase.
 *
 * Si se omite, Tailwind añadirá estas clases al final de la hoja de estilo por defecto.
 * su hoja de estilos por defecto.
 */
  @tailwind variants;

@layer
Use la directiva @layer para decirle a Tailwind a qué "cubo" pertenece un conjunto de estilos personalizados. Las capas válidas son base, components y utilities.

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  h1 {
    @apply text-2xl;
  }
  h2 {
    @apply text-xl;
  }
}

@layer components {
  .btn-blue {
    @apply bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded;
  }
}

@layer utilities {
  .filter-none {
    filter: none;
  }
  .filter-grayscale {
    filter: grayscale(100%);
  }
}

Tailwind moverá automáticamente cualquier CSS dentro de una directiva @layer al mismo lugar que la regla @tailwind correspondiente, por lo que no tiene que preocuparse por crear su CSS en un orden específico para evitar problemas de especificidad.

Cualquier CSS personalizado agregado a una capa solo se incluirá en la compilación final si ese CSS se usa realmente en su HTML, al igual que todas las clases integradas en Tailwind de forma predeterminada.

Empaquetar cualquier CSS personalizado en una directiva @layer también permite usar modificadores con esas reglas, como hover:: y focus:: o modificadores receptivos como md:: y lg:.

@apply
Utilice @apply para insertar cualquier clase de utilidad existente en su propio CSS personalizado.

Esto es útil cuando necesita escribir CSS personalizado (como anular los estilos en una biblioteca de terceros) pero aún desea trabajar con sus tokens de diseño y usar la misma sintaxis que está acostumbrado a usar en su HTML.

.select2-dropdown {
  @apply rounded-b-lg shadow-md;
}
.select2-search {
  @apply border border-gray-300 rounded;
}
.select2-results__group {
  @apply text-lg font-bold text-gray-900;
}

Cualquier regla alineada con @apply tendrá !important eliminado de forma predeterminada para evitar problemas de especificidad:

/* Input */
.foo {
  color: blue !important;
}

.bar {
  @apply foo;
}

/* Output */
.foo {
  color: blue !important;
}

.bar {
  color: blue;
}

Si desea @apply una clase existente y hacerla !!important, simplemente agregue !important al final de la declaración:

/* Input */
.btn {
  @apply font-bold py-2 px-4 rounded !important;
}

/* Output */
.btn {
  font-weight: 700 !important;
  padding-top: .5rem !important;
  padding-bottom: .5rem !important;
  padding-right: 1rem !important;
  padding-left: 1rem !important;
  border-radius: .25rem !important;
}

Tenga en cuenta que si está utilizando Sass / SCSS, deberá usar la función de interpolación de Sass para que esto funcione:

.btn {
  @apply font-bold py-2 px-4 rounded #{!important};
}

Uso de @apply con CSS por componente
Los marcos de componentes como Vue y Svelte admiten agregar estilos por componente dentro de un bloque <style> que vive en cada archivo de componente.

Si intentas @apply una clase personalizada que has definido en tu CSS global en uno de estos bloques <style> por componente, obtendrás un error sobre la clase que no existe:

principal.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  .card {
    background-color: theme(colors.white);
    border-radius: theme(borderRadius.lg);
    padding: theme(spacing.6);
    box-shadow: theme(boxShadow.xl);
  }
}
Card.svelte
<div>
  <slot></slot>
</div>

<style>
  div {
    /* Won't work because this file and main.css are processed separately */
    @apply card;
  }
</style>

Esto se debe a que, bajo el capó, los marcos como Vue y Svelte procesan cada bloque <style> de forma independiente y ejecutan su cadena de complementos PostCSS contra cada uno de forma aislada.

Eso significa que si tiene 10 componentes que tienen un bloque <style>, Tailwind se ejecuta 10 veces separadas y cada ejecución no tiene conocimiento sobre las otras carreras. Debido a esto, cuando intenta @apply card tarjeta en Card.svelte falla, porque Tailwind no tiene idea de que la clase card existe ya que Svelte procesó Card.svelte y main.css en total aislamiento entre síCard.svelte

La solución a este problema es definir cualquier estilo personalizado que desee @apply en sus componentes utilizando el sistema de complementos en su lugar:

tailwind.config.js
const plugin = require('tailwindcss/plugin')

module.exports = {
  // ...
  plugins: [
    plugin(function ({ addComponents, theme }) {
      addComponents({
        '.card': {
          backgroundColor: theme('colors.white'),
          borderRadius: theme('borderRadius.lg'),
          padding: theme('spacing.6'),
          boxShadow: theme('boxShadow.xl'),
        }
      })
    })
  ]
}

De esta manera, cualquier archivo procesado por Tailwind que use este archivo de configuración tendrá acceso a esos estilos.

Honestamente, la mejor solución es simplemente no hacer cosas raras como esta en absoluto. Use las utilidades de Tailwind directamente en su marcado de la manera en que están destinadas a ser utilizadas, y no abuse de la función @apply para hacer cosas como esta y tendrá una experiencia mucho mejor.