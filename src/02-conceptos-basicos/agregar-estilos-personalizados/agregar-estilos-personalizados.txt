Agregar estilos personalizados
Prácticas recomendadas para agregar tus propios estilos personalizados a Tailwind.

A menudo, el mayor desafío cuando se trabaja con un marco es averiguar qué se supone que debe hacer cuando hay algo que necesita que el marco no maneja por usted.

Tailwind ha sido diseñado desde cero para ser extensible y personalizable, de modo que no importa lo que estés construyendo, nunca sientas que estás luchando contra el marco.

Esta guía cubre temas como personalizar sus tokens de diseño, cómo romper esas restricciones cuando sea necesario, agregar su propio CSS personalizado y ampliar el marco con complementos.

Personalizar tu tema
Si desea cambiar cosas como la paleta de colores, la escala de espaciado, la escala de tipografía o los puntos de interrupción, agregue las personalizaciones a la sección de theme del archivo tailwind.config.js:

tailwind.config.js
module.exports = {
  theme: {
    screens: {
      sm: '480px',
      md: '768px',
      lg: '976px',
      xl: '1440px',
    },
    colors: {
      'blue': '#1fb6ff',
      'pink': '#ff49db',
      'orange': '#ff7849',
      'green': '#13ce66',
      'gray-dark': '#273444',
      'gray': '#8492a6',
      'gray-light': '#d3dce6',
    },
    fontFamily: {
      sans: ['Graphik', 'sans-serif'],
      serif: ['Merriweather', 'serif'],
    },
    extend: {
      spacing: {
        '128': '32rem',
        '144': '36rem',
      },
      borderRadius: {
        '4xl': '2rem',
      }
    }
  }
}

Uso de valores arbitrarios
Si bien generalmente puede construir la mayor parte de un diseño bien diseñado utilizando un conjunto restringido de tokens de diseño, de vez en cuando necesita salir de esas restricciones para obtener las cosas perfectas en píxeles.

Cuando realmente necesites algo como top: 117px para obtener una imagen de fondo en el lugar correcto, usa la notación de corchetes de Tailwind para generar una clase sobre la marcha con cualquier valor arbitrario:

<div class="top-[117px]">
  <!-- ... -->
</div>

Esto es básicamente como estilos en línea, con el gran beneficio de que puede combinarlo con modificadores interactivos como hover y modificadores receptivos como lg:

<div class="top-[117px] lg:top-[344px]">
  <!-- ... -->
</div>

Esto funciona para todo en el marco, incluidas cosas como colores de fondo, tamaños de fuente, contenido de pseudoelementos y más:

<div class="bg-[#bada55] text-[22px] before:content-['Festivus']">
  <!-- ... -->
</div>

Incluso es posible usar la función de theme para hacer referencia a los tokens de diseño en su tailwind.config.js:

<div class="grid grid-cols-[fit-content(theme(spacing.32))]">
  <!-- ... -->
</div>

Propiedades arbitrarias
Si alguna vez necesitas usar una propiedad CSS para la que Tailwind no incluye una utilidad, también puedes usar la notación entre corchetes para escribir CSS completamente arbitrario:

<div class="[mask-type:luminance]">
  <!-- ... -->
</div>
Esto es realmente como los estilos en línea, pero nuevamente con el beneficio de que puede usar modificadores:

<div class="[mask-type:luminance] hover:[mask-type:alpha]">
  <!-- ... -->
</div>
Esto también puede ser útil para cosas como variables CSS, especialmente cuando necesitan cambiar bajo diferentes condiciones:

<div class="[--scroll-offset:56px] lg:[--scroll-offset:44px]">
  <!-- ... -->
</div>

Variantes arbitrarias
Las variantes arbitrarias son como valores arbitrarios, pero para realizar modificaciones de selector sobre la marcha, como puede hacerlo con variantes de pseudoclase integradas como hover:{utility} o variantes receptivas como md:{utility} pero usando la notación entre corchetes directamente en su HTML.hover:{utility}

<ul role="list">
  {#each items as item}
    <li class="lg:[&:nth-child(3)]:hover:underline">{item}</li>
  {/each}
</ul>

Manejo de espacios en blanco
Cuando un valor arbitrario necesite contener un espacio, use un guión bajo (_) en su lugar y Tailwind lo convertirá automáticamente en un espacio en tiempo de compilación:

<div class="grid grid-cols-[1fr_500px_2fr]">
  <!-- ... -->
</div>

En situaciones en las que los guiones bajos son comunes pero los espacios no son válidos, Tailwind conservará el guión bajo en lugar de convertirlo en un espacio, por ejemplo, en las URL:

<div class="bg-[url('/what_a_rush.png')]">
  <!-- ... -->
</div>

En el raro caso de que realmente necesites usar un guión bajo, pero es ambiguo porque un espacio también es válido, escapa del guión bajo con una barra diagonal inversa y Tailwind no lo convertirá en un espacio:

<div class="before:content-['hello\_world']">
  <!-- ... -->
</div>

Si usas algo como JSX, donde la barra diagonal inversa se elimina del HTML renderizado, usa String.raw() para que la barra diagonal inversa no se trate como un carácter de escape de JavaScript:

<div className={String.raw`before:content-['hello\_world']`}>
  <!-- ... -->
</div>