Agregar estilos personalizados
Prácticas recomendadas para agregar tus propios estilos personalizados a Tailwind.

A menudo, el mayor desafío cuando se trabaja con un marco es averiguar qué se supone que debe hacer cuando hay algo que necesita que el marco no maneja por usted.

Tailwind ha sido diseñado desde cero para ser extensible y personalizable, de modo que no importa lo que estés construyendo, nunca sientas que estás luchando contra el marco.

Esta guía cubre temas como personalizar sus tokens de diseño, cómo romper esas restricciones cuando sea necesario, agregar su propio CSS personalizado y ampliar el marco con complementos.

Personalizar tu tema
Si desea cambiar cosas como la paleta de colores, la escala de espaciado, la escala de tipografía o los puntos de interrupción, agregue las personalizaciones a la sección de theme del archivo tailwind.config.js:

tailwind.config.js
module.exports = {
  theme: {
    screens: {
      sm: '480px',
      md: '768px',
      lg: '976px',
      xl: '1440px',
    },
    colors: {
      'blue': '#1fb6ff',
      'pink': '#ff49db',
      'orange': '#ff7849',
      'green': '#13ce66',
      'gray-dark': '#273444',
      'gray': '#8492a6',
      'gray-light': '#d3dce6',
    },
    fontFamily: {
      sans: ['Graphik', 'sans-serif'],
      serif: ['Merriweather', 'serif'],
    },
    extend: {
      spacing: {
        '128': '32rem',
        '144': '36rem',
      },
      borderRadius: {
        '4xl': '2rem',
      }
    }
  }
}

Uso de valores arbitrarios
Si bien generalmente puede construir la mayor parte de un diseño bien diseñado utilizando un conjunto restringido de tokens de diseño, de vez en cuando necesita salir de esas restricciones para obtener las cosas perfectas en píxeles.

Cuando realmente necesites algo como top: 117px para obtener una imagen de fondo en el lugar correcto, usa la notación de corchetes de Tailwind para generar una clase sobre la marcha con cualquier valor arbitrario:

<div class="top-[117px]">
  <!-- ... -->
</div>

Esto es básicamente como estilos en línea, con el gran beneficio de que puede combinarlo con modificadores interactivos como hover y modificadores receptivos como lg:

<div class="top-[117px] lg:top-[344px]">
  <!-- ... -->
</div>

Esto funciona para todo en el marco, incluidas cosas como colores de fondo, tamaños de fuente, contenido de pseudoelementos y más:

<div class="bg-[#bada55] text-[22px] before:content-['Festivus']">
  <!-- ... -->
</div>

Incluso es posible usar la función de theme para hacer referencia a los tokens de diseño en su tailwind.config.js:

<div class="grid grid-cols-[fit-content(theme(spacing.32))]">
  <!-- ... -->
</div>

Propiedades arbitrarias
Si alguna vez necesitas usar una propiedad CSS para la que Tailwind no incluye una utilidad, también puedes usar la notación entre corchetes para escribir CSS completamente arbitrario:

<div class="[mask-type:luminance]">
  <!-- ... -->
</div>
Esto es realmente como los estilos en línea, pero nuevamente con el beneficio de que puede usar modificadores:

<div class="[mask-type:luminance] hover:[mask-type:alpha]">
  <!-- ... -->
</div>
Esto también puede ser útil para cosas como variables CSS, especialmente cuando necesitan cambiar bajo diferentes condiciones:

<div class="[--scroll-offset:56px] lg:[--scroll-offset:44px]">
  <!-- ... -->
</div>

Variantes arbitrarias
Las variantes arbitrarias son como valores arbitrarios, pero para realizar modificaciones de selector sobre la marcha, como puede hacerlo con variantes de pseudoclase integradas como hover:{utility} o variantes receptivas como md:{utility} pero usando la notación entre corchetes directamente en su HTML.hover:{utility}

<ul role="list">
  {#each items as item}
    <li class="lg:[&:nth-child(3)]:hover:underline">{item}</li>
  {/each}
</ul>

Manejo de espacios en blanco
Cuando un valor arbitrario necesite contener un espacio, use un guión bajo (_) en su lugar y Tailwind lo convertirá automáticamente en un espacio en tiempo de compilación:

<div class="grid grid-cols-[1fr_500px_2fr]">
  <!-- ... -->
</div>

En situaciones en las que los guiones bajos son comunes pero los espacios no son válidos, Tailwind conservará el guión bajo en lugar de convertirlo en un espacio, por ejemplo, en las URL:

<div class="bg-[url('/what_a_rush.png')]">
  <!-- ... -->
</div>

En el raro caso de que realmente necesites usar un guión bajo, pero es ambiguo porque un espacio también es válido, escapa del guión bajo con una barra diagonal inversa y Tailwind no lo convertirá en un espacio:

<div class="before:content-['hello\_world']">
  <!-- ... -->
</div>

Si usas algo como JSX, donde la barra diagonal inversa se elimina del HTML renderizado, usa String.raw() para que la barra diagonal inversa no se trate como un carácter de escape de JavaScript:

<div className={String.raw`before:content-['hello\_world']`}>
  <!-- ... -->
</div>

Resolución de ambigüedades
Muchas utilidades en Tailwind comparten un espacio de nombres común pero se asignan a diferentes propiedades CSS. Por ejemplo, text-lg y text-black comparten el espacio de nombres text- pero uno es para font-size y el otro es para color.

Cuando se usan valores arbitrarios, Tailwind generalmente puede manejar esta ambigüedad automáticamente en función del valor que se transmite:

<!-- Will generate a font-size utility -->
<div class="text-[22px]">...</div>

<!-- Will generate a color utility -->
<div class="text-[#bada55]">...</div>
Sin embargo, a veces es realmente ambiguo, por ejemplo, cuando se usan variables CSS:

<div class="text-[var(--my-var)]">...</div>
En estas situaciones, puede "sugerir" el tipo subyacente a Tailwind agregando un tipo de datos CSS antes del valor:

<!-- Will generate a font-size utility -->
<div class="text-[length:var(--my-var)]">...</div>

<!-- Will generate a color utility -->
<div class="text-[color:var(--my-var)]">...</div>

Uso de CSS y @layer
Cuando necesite agregar reglas CSS verdaderamente personalizadas a un proyecto de Tailwind, el enfoque más fácil es simplemente agregar el CSS personalizado a su hoja de estilo:

main.css
@tailwind base;
@tailwind components;
@tailwind utilities;

.my-custom-style {
  /* ... */
}

Para obtener más potencia, también puede usar la directiva @layer para agregar estilos a las capas base, components y utilities de Tailwind:

main.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  .my-custom-style {
    /* ... */
  }
}

La directiva @layer le ayuda a controlar el orden de la declaración al reubicar automáticamente sus estilos en la directiva @tailwind correspondiente, y también habilita características como modificadores y sacudidas de árboles para su propio CSS personalizado.

Agregar estilos base
Si solo desea establecer algunos valores predeterminados para la página (como el color del texto, el color de fondo o la familia de fuentes), la opción más fácil es simplemente agregar algunas clases a los elementos html o body:

<!doctype html>
<html lang="en" class="text-gray-900 bg-gray-100 font-serif">
  <!-- ... -->
</html>
Esto mantiene sus decisiones de estilo base en su marcado junto con todos sus otros estilos, en lugar de ocultarlos en un archivo separado.

Si desea agregar sus propios estilos base predeterminados para elementos HTML específicos, use la directiva @layer para agregar esos estilos a la capa base de Tailwind:

main.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  h1 {
    @apply text-2xl;
  }
  h2 {
    @apply text-xl;
  }
  /* ... */
}

Utilice la función theme tema o la directiva @apply al agregar estilos base personalizados si desea hacer referencia a cualquiera de los valores definidos en el tema.

Agregar clases de componente
Utilice la capa de components para cualquier clase más complicada que desee agregar al proyecto y que aún desee poder reemplazar con clases de utilidad.

Tradicionalmente, estas serían clases como card, btn, badge, ese tipo de cosas.

main.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  .card {
    background-color: theme('colors.white');
    border-radius: theme('borderRadius.lg');
    padding: theme('spacing.6');
    box-shadow: theme('boxShadow.xl');
  }
  /* ... */
}

Al definir clases de componentes en la capa de components, puede seguir utilizando clases de utilidad para reemplazarlas cuando sea necesario:

<!-- Will look like a card, but with square corners -->
<div class="card rounded-none">
  <!-- ... -->
</div>

Usando Tailwind probablemente no necesites este tipo de clases tan a menudo como crees. Lea nuestra guía sobre la reutilización de estilos para ver nuestras recomendaciones.
https://tailwindcss.com/docs/reusing-styles

La capa de components también es un buen lugar para colocar estilos personalizados para cualquier componente de terceros que esté utilizando:

main.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  .select2-dropdown {
    @apply rounded-b-lg shadow-md;
  }
  .select2-search {
    @apply border border-gray-300 rounded;
  }
  .select2-results__group {
    @apply text-lg font-bold text-gray-900;
  }
  /* ... */
}
Utilice la función theme tema o la directiva @apply al agregar estilos de componentes personalizados si desea hacer referencia a cualquiera de los valores definidos en el tema.

Agregar utilidades personalizadas
Agregue cualquiera de sus propias clases de utilidad personalizadas a la capa de utilities de Tailwind:

principal.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
  .content-auto {
    content-visibility: auto;
  }
}

Esto puede ser útil cuando hay una característica de CSS que le gustaría usar en su proyecto que Tailwind no incluye utilidades listas para usar.

Uso de modificadores con CSS personalizado
Cualquier estilo personalizado que agregues a Tailwind con @layer admitirá automáticamente la sintaxis del modificador de Tailwind para manejar cosas como estados de desplazamiento, puntos de interrupción receptivos, modo oscuro y más.

.CSS
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
  .content-auto {
    content-visibility: auto;
  }
}

.HTML
<div class="lg:dark:content-auto">
  <!-- ... -->
</div>

Eliminación de CSS personalizado no utilizado
Cualquier estilo personalizado que agregue a las capas base, components o utilities solo se incluirá en su CSS compilado si esos estilos se usan realmente en su HTML.

main.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  /* This won't be included in your compiled CSS unless you actually use it */
  .card {
    /* ... */
  }
}

Si desea agregar algún CSS personalizado que siempre debe incluirse, agréguelo a su hoja de estilo sin usar la directiva @layer:

main.css
@tailwind base;
@tailwind components;

/* This will always be included in your compiled CSS */
.card {
  /* ... */
}

@tailwind utilities;
Asegúrese de colocar sus estilos personalizados donde deben ir para obtener el comportamiento de prioridad que desea. En el ejemplo anterior, hemos agregado la clase ..card antes de @tailwind utilidades para asegurarnos de que las @tailwind utilities aún puedan reemplazarla.