Manejo de Hover, Focus y otros estados

Usar utilidades para aplicar estilo a los elementos al hacer hover, focus y más.

Cada clase de utilidad en Tailwind se puede aplicar condicionalmente agregando un modificador al principio del nombre de clase que describe la condición a la que desea apuntar.

Por ejemplo, para aplicar la clase bg-sky-700 al pasar el puntero, use la clase hover:bg-sky-700 bg-sky-700

...

Tailwind incluye modificadores para casi todo lo que necesitarás, incluyendo:

    ---Pseudoclases, como ::hover, ::focus, ::first-child y :required

    ---Pseudoelementos, como ::::before, ::::after, :::placeholder y :::selection

    ---Consultas de medios y características, como puntos de interrupción sensibles, modo oscuro y prefers-reduced-motion

    ---Selectores de atributos, como [[dir="rtl"]] y [open]

Estos modificadores incluso se pueden apilar para apuntar a situaciones más específicas, por ejemplo, cambiar el color de fondo en modo oscuro, en el punto de interrupción medio, al pasar el ratón:

<button class="dark:md:hover:bg-fuchsia-600 ...">
  Save changes
</button>

En esta guía, aprenderá sobre todos los modificadores disponibles en el marco, cómo usarlos con sus propias clases personalizadas e incluso cómo crear las suyas propias.

Pseudo-classes
​
Hover, focus, y active
Aplicar estilo a los elementos al desplazar, enfocar y activar con los modificadores hover, focus y active:

...

Tailwind también incluye modificadores para otros estados interactivos como ::visited, ::focus-within y más. :focus-visible

Consulte la referencia de pseudoclase para obtener una lista completa de los modificadores de pseudoclase disponibles. https://tailwindcss.com/docs/hover-focus-and-other-states#pseudo-class-reference

Primero, último, impar y par
Aplicar estilo a un elemento cuando es el primer o el último hijo utilizando el first y last modificador:

 <ul role="list" class="p-6 divide-y divide-slate-200">
      {#each people as person}
          <!-- Elimina el relleno superior/inferior del primer/último hijo -->
      <li class="flex py-4 first:pt-0 last:pb-0">
        <img class="h-10 w-10 rounded-full" src="{person.imageUrl}" alt="" />
        <div class="ml-3 overflow-hidden">
          <p class="text-sm font-medium text-slate-900">{person.name}</p>
          <p class="text-sm text-slate-500 truncate">{person.email}</p>
        </div>
      </li>
      {/each}
    </ul>

También puedes aplicar estilo a un elemento cuando es un niño par o impar usando even odd:

<table>
  <!-- ... -->
  <tbody>
    {#each people as person}
         <!-- Utilice un fondo blanco para las filas impares, y pizarra-50 para las filas pares -->
      <tr class="odd:bg-white even:bg-slate-50">
        <td>{person.name}</td>
        <td>{person.title}</td>
        <td>{person.email}</td>
      </tr>
    {/each}
  </tbody>
</table>

Tailwind también incluye modificadores para otras pseudoclases estructurales como ::only-child, ::first-of-type, :empty y más.

Consulte la referencia de pseudoclase para obtener una lista completa de los modificadores de pseudoclase disponibles. https://tailwindcss.com/docs/hover-focus-and-other-states#pseudo-class-reference

Estados del formulario
Aplicar estilos a elementos de formulario en diferentes estados mediante modificadores como required, invalid y disabled:

Intente hacer que la dirección de correo electrónico sea válida para ver cómo cambian los estilos

...

El uso de modificadores para este tipo de cosas puede reducir la cantidad de lógica condicional en sus plantillas, permitiéndole usar el mismo conjunto de clases independientemente del estado en el que se encuentre una entrada y permitiendo que el navegador aplique los estilos correctos para usted.

Tailwind también incluye modificadores para otros estados de formulario como ::read-only, ::indeterminate, :checked, y más.

Consulte la referencia de pseudoclase para obtener una lista completa de los modificadores de pseudoclase disponibles. https://tailwindcss.com/docs/hover-focus-and-other-states#disabled

Estilo basado en el estado primario (grupo-{modificador})
Cuando necesite aplicar un estilo a un elemento basado en el estado de algún elemento padre, marque el elemento padre con la clase group y use modificadores group-* como group group-hover para aplicar estilo al elemento de destino:group-*
Coloca el cursor sobre la tarjeta para ver que ambos elementos de texto cambian de color

...

Este patrón funciona con todos los modificadores de pseudoclase, por ejemplo, group-focus, group-active o group-odd.

Diferenciación de grupos anidados
Al anidar grupos, puede aplicar estilos a algo basado en el estado de un grupo primario específico dándole a ese padre un nombre de grupo único usando una clase group/{name} e incluyendo ese nombre en modificadores usando clases como group-hover/{name} group/{name}:

<ul role="list">
  {#each people as person}
    <li class="group/item hover:bg-slate-100 ...">
      <img src="{person.imageUrl}" alt="" />
      <div>
        <a href="{person.url}">{person.name}</a>
        <p>{person.title}</p>
      </div>
      <a class="group/edit invisible hover:bg-slate-200 group-hover/item:visible ..." href="tel:{person.phone}">
        <span class="group-hover/edit:text-gray-700 ...">Call</span>
        <svg class="group-hover/edit:translate-x-0.5 group-hover/edit:text-slate-500 ...">
          <!-- ... -->
        </svg>
      </a>
    </li>
  {/each}
</ul>

Los grupos se pueden nombrar como quieras y no necesitan ser configurados de ninguna manera: simplemente nombra tus grupos directamente en tu marcado y Tailwind generará automáticamente el CSS necesario.

Grupos arbitrarios
Puede crear modificadores de group-* únicos sobre la marcha proporcionando su propio selector como un valor arbitrario entre corchetes:

...

Para tener más control, puede usar el carácter & para marcar dónde debe terminar .group en el selector final en relación con el selector que está pasando:

...

Estilo basado en el estado del mismo nivel (par-{modificador})
Cuando necesite aplicar estilo a un elemento basado en el estado de un elemento hermano, marque el elemento del mismo nivel con la clase peer y use modificadores peer-peer-* para aplicar estilo al elemento de destino:peer-invalid
Intente hacer que la dirección de correo electrónico sea válida para ver desaparecer la advertencia

...

Esto hace posible hacer todo tipo de trucos geniales, como etiquetas flotantes, por ejemplo, sin ningún JS.

Este patrón funciona con todos los modificadores de pseudoclase, por ejemplo, peer-required y peer-focuspeer-disabled.

Es importante tener en cuenta que el marcador del peer solo se puede usar en hermanos anteriores debido a cómo funciona el combinador de hermanos generales en CSS.

❌ No funcionará, solo los hermanos anteriores pueden ser marcados como compañeros

<label>
  <span class="peer-invalid:text-red-500 ...">Email</span>
  <input type="email" class="peer ..."/>
</label>

Diferenciar a los pares
Cuando se usan varios pares, puede aplicar estilo a algo en el estado de un par específico dándole a ese par un nombre único usando una clase peer/{name}, e incluyendo ese nombre en modificadores usando clases como peer-checked/{name} peer/{name}:

...

Los pares se pueden nombrar como quieras y no necesitan configurarse de ninguna manera: simplemente nombra a tus pares directamente en tu marcado y Tailwind generará automáticamente el CSS necesario.

Pares arbitrarios
Puede crear modificadores peer-* únicos sobre la marcha proporcionando su propio selector como un valor arbitrario entre corchetes:

...

Para tener más control, puede usar el carácter & para marcar dónde debería terminar .peer en el selector final en relación con el selector que está pasando:

<div>
      <input type="text" class="peer" />
      <div class="hidden peer-[:nth-of-type(3)_&]:block">
        <!-- ... -->
      </div>

Pseudoelementos
​
after y before
Aplique estilo a los pseudoelementos ::before y ::::after utilizando los modificadores before y after::before

...

Al usar estos modificadores, Tailwind agregará automáticamente contenido: '' de forma predeterminada para que no tenga que especificarlo a menos que desee un valor diferentecontent: ''

...

Vale la pena señalar que realmente no necesitas pseudo-elementos ::::before y :::after para la mayoría de las cosas en los proyectos Tailwind; por lo general, es más simple usar un elemento HTML real.

Por ejemplo, aquí está el mismo diseño de arriba pero usando un <span> en lugar del pseudo-elemento ::before, que es un poco más fácil de leer y en realidad es menos código

...

Guarde before y after para situaciones en las que es importante que el contenido del pseudoelemento no esté realmente en el DOM y no pueda ser seleccionado por el usuario.

Tenga en cuenta que si ha deshabilitado nuestros estilos base de comprobación previa, la propiedad content no se establecerá en una cadena vacía de forma predeterminada y deberá incluir content-[''] cada vez que use los modificadores before y after.

Texto del placeholder
Aplique estilo al texto del marcador de posición de cualquier entrada o área de texto mediante el modificador de placeholder:

...

Botones de entrada de archivos
Aplique estilo al botón en las entradas de archivo utilizando el modificador de file:

...

Tenga en cuenta que el restablecimiento del borde de Tailwind no se aplica a los botones de entrada de archivos. Esto significa que para agregar un borde a un botón de entrada de archivo, debe establecer explícitamente el estilo de borde utilizando una clase como file:border-solid junto con cualquier utilidad de ancho de borde:

<input type="file" class="file:border file:border-solid ..." />

Lista de marcadores
Aplique estilo a los contadores o viñetas de las listas con el modificador de marker:

...

Hemos diseñado el modificador de marker para que sea heredable, por lo que, aunque puede usarlo directamente en un elemento <li>, también puede usarlo en un padre para evitar repetirse.

Texto resaltado
Aplique estilo a la selección de texto activa mediante el modificador de selection:

...

Hemos diseñado el modificador de selection para que sea heredable, por lo que puede agregarlo en cualquier lugar del árbol y se aplicará a todos los elementos descendientes.

Esto facilita la configuración del color de selección para que coincida con su marca en todo el sitio:

<html>
<head>
  <!-- ... -->
</head>
<body class="selection:bg-pink-300">
  <!-- ... -->
</body>
</html>

Primera línea y primera letra
Aplique estilo a la primera línea de un bloque de contenido con el modificador de primera first-line y a la primera letra con el modificador first-letter:

...

Fondos de diálogo
Aplique estilo al fondo de un elemento nativo <dialog> mediante el modificador de backdrop:

<dialog class="backdrop:bg-gray-50">
  <form method="dialog">
    <!-- ... -->
  </form>
</dialog>

Si usa elementos nativos <dialog> en el proyecto, es posible que también desee leer sobre cómo aplicar estilos a los estados abierto/cerrado con el modificador open.

Consultas de medios y características
​
Puntos de interrupción responsivos
Para aplicar estilo a un elemento en un punto de interrupción específico, use modificadores responsivos como md y lg.

Por ejemplo, esto representará una cuadrícula de 3 columnas en dispositivos móviles, una cuadrícula de 4 columnas en pantallas de ancho medio y una cuadrícula de 6 columnas en pantallas de gran ancho:

...

Consulte la documentación de diseño adaptable para obtener una visión en profundidad de cómo funcionan estas características. https://tailwindcss.com/docs/responsive-design

Prefiere el esquema de color
La consulta de medios prefers-color-scheme le indica si el usuario prefiere un tema claro u oscuro, y normalmente se configura en el nivel del sistema operativo.

Utilice utilidades sin modificador para orientar el modo claro y utilice el modificador oscuro para proporcionar anulaciones para el modo dark:

...

Consulte la documentación del modo oscuro para obtener una visión en profundidad de cómo funciona esta función. https://tailwindcss.com/docs/dark-mode

Orientación de la ventana gráfica
Utilice los modificadores portrait y landscape para agregar estilos condicionalmente cuando la ventana gráfica esté en una orientación específica:

<div>
  <div class="portrait:hidden">
    <!-- ... -->
  </div>
  <div class="landscape:hidden">
    <p>
      This experience is designed to be viewed in landscape. Please rotate your
      device to view the site.
    </p>
  </div>
</div>

Selectores de atributos
​
Estados ARIA
Usar el modificador aria-* para aplicar estilos condicionales a las cosas en función de los atributos ARIA.

Por ejemplo, para aplicar la clase bg-sky-700 cuando el atributo aria-checked se establece en true, utilice la clase aria-checked:bg-sky-700 bg-sky-700 aria-checked
<div aria-checked="true" class="bg-gray-600 aria-checked:bg-sky-700">
  <!-- ... -->
</div>
De forma predeterminada, hemos incluido modificadores para los atributos booleanos ARIA más comunes:


Modificador	 |  .CSS
aria-checked  | 	&[aria-checked=“true”]
aria-disabled  | 	&[aria-disabled=“true”]
aria-expanded  | 	&[aria-expanded=“true”]
aria-hidden  | 	&[aria-hidden=“true”]
aria-pressed  | 	&[aria-pressed=“true”]
aria-readonly  | 	&[aria-readonly=“true”]
aria-required  | 	&[aria-required=“true”]
aria-selected  | 	&[aria-selected=“true”]

Atributos de datos
Usar el modificador data-* para aplicar condicionalmente estilos basados en atributos de datos.

Dado que no hay atributos data-* estándar por definición, de forma predeterminada solo admitimos valores arbitrarios listos para usar, por ejemplo:

<!-- Will apply -->
<div data-size="large" class="data-[size=large]:p-8">
  <!-- ... -->
</div>

<!-- Will not apply -->
<div data-size="medium" class="data-[size=large]:p-8">
  <!-- ... -->
</div>

Estado abierto/cerrado
Utilice el modificador open para agregar estilos condicionalmente cuando un elemento <<details>> o <dialog> esté en estado abierto:

...

Modificadores personalizados
​
Uso de variantes arbitrarias
Al igual que los valores arbitrarios le permiten usar valores personalizados con sus clases de utilidad, las variantes arbitrarias le permiten escribir modificadores de selector personalizados directamente en su HTML.

Las variantes arbitrarias son solo cadenas de formato que representan el selector, envueltas entre corchetes. Por ejemplo, este modificador arbitrario selecciona un elemento sólo cuando es el tercer hijo:

...

Temas avanzados
​
Uso con tus propias clases
Todos los modificadores de Tailwind están disponibles para usar con sus propias clases personalizadas, siempre y cuando los haya definido en una de las capas de Tailwind o los haya agregado usando un complemento.:

...

Ordenar modificadores apilados
Al apilar modificadores, se aplican de adentro hacia afuera, como llamadas a funciones anidadas:

// These modifiers:
'dark:group-hover:focus:opacity-100'

// ...are applied like this:
dark(groupHover(focus('opacity-100')))

En su mayor parte, esto en realidad no importa, pero hay algunas situaciones en las que el orden que usa realmente genera CSS significativamente diferente.

Por ejemplo, si tiene darkMode configurado para class, la combinación de los modificadores dark y group-hover genera un resultado diferente en función del orden que utilice:

/* dark:group-hover:opacity-100 */
.dark .group:hover .dark\:group-hover\:opacity-100 {
  opacity: 1;
}

/* group-hover:dark:opacity-100 */
.group:hover .dark .group-hover\:dark\:opacity-100 {
  opacity: 1;
}

En el primer ejemplo, el elemento dark debe ser un elemento padre del elemento group, pero en el segundo ejemplo se invierte.

Otro lugar donde esto es importante es cuando se usan modificadores como prose-headings que se incluyen con el complemento oficial de tipografía:

/* prose-headings:hover:underline */
.prose-headings\:hover\:underline:hover :is(:where(h1, h2, h3, h4, th)) {
  text-decoration: underline;
}

/* hover:prose-headings:underline */
.hover\:prose-headings\:underline :is(:where(h1, h2, h3, h4, th)):hover {
  text-decoration: underline;
}

En el primer ejemplo, cada encabezado se subraya cuando pasa el cursor sobre el artículo en sí, mientras que en el segundo ejemplo, cada encabezado solo se subraya cuando pasa el cursor sobre ese encabezado.

Referencia rápida
Una tabla de referencia rápida de cada modificador incluido en Tailwind de forma predeterminada.

Modificador 	|  .CSS

hover   |  	&:hover
focus   |  	&:focus
focus-within   |  	&:focus-within
focus-visible   |  	&:focus-visible
active   |  	&:active
visited   |  	&:visited
target   |  	&:target
first   |  	&:first-child
last   |  	&:last-child
only   |  	&:only-child
odd   |  	&:nth-child(odd)
even   |  	&:nth-child(even)
first-of-type   |  	&:first-of-type
last-of-type   |  	&:last-of-type
only-of-type   |  	&:only-of-type
empty   |  	&:empty
disabled   |  	&:disabled
enabled   |  	&:enabled
checked   |  	&:checked
indeterminate   |  	&:indeterminate
default   |  	&:default
required   |  	&:required
valid   |  	&:valid
invalid   |  	&:invalid
in-range   |  	&:in-range
out-of-range   |  	&:out-of-range
placeholder-shown   |  	&:placeholder-shown
autofill   |  	&:autofill
read-only   |  	&:read-only
before   |  	&::before
after   |  	&::after
first-letter   |  	&::first-letter
first-line   |  	&::first-line
marker   |  	&::marker
selection   |  	&::selection
file   |  	&::file-selector-button
backdrop   |  	&::backdrop
placeholder   |  	&::placeholder
sm   |  	@media (min-width: 640px)
md   |  	@media (min-width: 768px)
lg   |  	@media (min-width: 1024px)
xl   |  	@media (min-width: 1280px)
2xl   |  	@media (min-width: 1536px)
min-[…]   |  	@media (min-width: …)
max-sm   |  	@media not all and (min-width: 640px)
max-md   |  	@media not all and (min-width: 768px)
max-lg   |  	@media not all and (min-width: 1024px)
max-xl   |  	@media not all and (min-width: 1280px)
max-2xl   |  	@media not all and (min-width: 1536px)
max-[…]   |  	@media (max-width: …)
dark   |  	@media (prefers-color-scheme: dark)
portrait   |  	@media (orientation: portrait)
landscape   |  	@media (orientation: landscape)
motion-safe   |  	@media (prefers-reduced-motion: no-preference)
motion-reduce   |  	@media (prefers-reduced-motion: reduce)
contrast-more   |  	@media (prefers-contrast: more)
contrast-less   |  	@media (prefers-contrast: less)
print   |  	@media print
supports-[…]   |  	@supports (…)
aria-checked  	|   &[aria-checked=“true”]
aria-disabled  	|   &[aria-disabled=“true”]
aria-expanded  	|   &[aria-expanded=“true”]
aria-hidden  	|   &[aria-hidden=“true”]
aria-pressed  	|   &[aria-pressed=“true”]
aria-readonly  	|   &[aria-readonly=“true”]
aria-required  	|   &[aria-required=“true”]
aria-selected  	|   &[aria-selected=“true”]
aria-[…]  	|   &[aria-…]
data-[…]  	|   &[data-…]
rtl	[dir=“rtl”]   |   &
ltr	[dir=“ltr”]   |   &
open  	|   &[open]

Referencia de pseudoclase
Esta es una lista completa de ejemplos para todos los modificadores de pseudo-clase incluidos en Tailwind para complementar la documentación de pseudo-clases al principio de esta guía.

hover (:hover)
Aplicar estilo a un elemento cuando el usuario se desplaza sobre él con el cursor del ratón mediante el modificador hover:

<div class="bg-black hover:bg-white ...">
  <!-- ... -->
</div>
​
Focus (:foco)
Aplicar estilo a un elemento cuando tiene el foco con el modificador de focus:

<input class="border-gray-300 focus:border-blue-400 ..." />
​
foco-dentro (:foco-dentro)
Aplicar estilo a un elemento cuando éste o uno de sus descendientes tiene el foco mediante el modificador focus-within:

<div class="focus-within:shadow-lg ...">
  <input type="text" />
</div>
​
foco-visible (:foco-visible)
Aplicar estilo a un elemento cuando se ha enfocado con el teclado mediante el modificador focus-visible:

<button class="focus:outline-none focus-visible:ring ...">
  Submit
</button>
​
activo (:activo)
Aplicar estilo a un elemento cuando se presiona con el modificador active:

<button class="bg-blue-500 active:bg-blue-600 ...">
  Submit
</button>
​
visitado (:visitado)
Aplicar estilo a un enlace cuando ya se ha visitado utilizando el modificador visited:

<a href="https://seinfeldquotes.com" class="text-blue-600 visited:text-purple-600 ...">
  Inspiration
</a>
​
target (:target)
Aplique estilo a un elemento si su ID coincide con el fragmento de URL actual mediante el modificador de target:

<div id="about" class="target:shadow-lg ...">
  <!-- ... -->
</div>
​
Primero (:primer hijo)
Aplicar estilo a un elemento si es el primer elemento secundario con el first modificador:

<ul>
  {#each people as person}
    <li class="py-4 first:pt-0 ...">
      <!-- ... -->
    </li>
  {/each}
</ul>

último (:último-hijo)
Aplicar estilo a un elemento si es el último elemento secundario con el last modificador:

<ul>
  {#each people as person}
    <li class="py-4 last:pb-0 ...">
      <!-- ... -->
    </li>
  {/each}
</ul>
​
solo (:only-child)
Aplicar estilo a un elemento si es el único elemento secundario que usa el only modificador:

<ul>
  {#each people as person}
    <li class="py-4 only:py-0 ...">
      <!-- ... -->
    </li>
  {/each}
</ul>
​
impar (:nth-child(odd))
Aplica estilo a un elemento si es un hijo con números impares usando el modificador odd:

<table>
  {#each people as person}
    <tr class="bg-white odd:bg-gray-100 ...">
      <!-- ... -->
    </tr>
  {/each}
</table>
​
par (:nth-niño(par))
Aplica estilo a un elemento si es un hijo con números pares usando el modificador even:

<table>
  {#each people as person}
    <tr class="bg-white even:bg-gray-100 ...">
      <!-- ... -->
    </tr>
  {/each}
</table>
​
Primero del tipo (:primero-del-tipo)
Aplicar estilo a un elemento si es el primer elemento secundario de su tipo con el first-of-type:

<nav>
  <img src="/logo.svg" alt="Vandelay Industries" />
  {#each links as link}
    <a href="#" class="ml-2 first-of-type:ml-6 ...">
      <!-- ... -->
    </a>
  {/each}
</table>
​
last-of-type (:last-of-type)
Aplicar estilo a un elemento si es el último elemento secundario de su tipo con el último modificador last-of-type:

<nav>
  <img src="/logo.svg" alt="Vandelay Industries" />
  {#each links as link}
    <a href="#" class="mr-2 last-of-type:mr-6 ...">
      <!-- ... -->
    </a>
  {/each}
  <button>More</button>
</table>
​
only-of-type (:only-of-type)
Aplicar estilo a un elemento si es el único elemento secundario de su tipo con el modificador only-of-type:

<nav>
  <img src="/logo.svg" alt="Vandelay Industries" />
  {#each links as link}
    <a href="#" class="mx-2 only-of-type:mx-6 ...">
      <!-- ... -->
    </a>
  {/each}
  <button>More</button>
</table>
​
vacío (:vacío)
Aplicar estilo a un elemento si no tiene contenido mediante el modificador empty:

<ul>
  {#each people as person}
    <li class="empty:hidden ...">{person.hobby}</li>
  {/each}
</ul>

deshabilitado (:d isabled)
Aplicar estilo a una entrada cuando está deshabilitada con el modificador disabled:

<input class="disabled:opacity-75 ..." />
​
habilitado (:enabled)
Aplicar estilo a una entrada cuando está habilitada con el modificador enabled, más útil cuando solo desea aplicar otro estilo cuando un elemento no está deshabilitado:

<input class="enabled:hover:border-gray-400 disabled:opacity-75 ..." />
​
comprobado (:checked)
Aplicar estilo a una casilla de verificación o botón de opción cuando está marcada con el modificador checked:

<input type="checkbox" class="appearance-none checked:bg-blue-500 ..." />
​
indeterminado (:indeterminado)
Aplique estilo a una casilla de verificación o botón de opción en un estado indeterminado utilizando el modificador indeterminate:

<input type="checkbox" class="appearance-none indeterminate:bg-gray-300 ..." />
​
Predeterminado (:d efault)
Aplique estilo a una opción, casilla de verificación o botón de opción que era el valor predeterminado cuando la página se cargó inicialmente con el modificador default:

<input type="checkbox" class="default:ring-2 ..." />
​
requerido (:requerido)
Aplique estilo a una entrada cuando sea necesario utilizando el modificador required:

<input class="required:border-red-500 ..." />
​
valid (:valid)
Aplicar estilo a una entrada cuando sea válida con el modificador valid:

<input class="valid:border-green-500 ..." />
​
invalid (:invalid)
Aplicar estilo a una entrada cuando no es válida con el modificador no invalid:

<input class="invalid:border-red-500 ..." />
​
En el rango (:in-range)
Aplique estilo a una entrada cuando su valor esté dentro de un límite de rango especificado utilizando el modificador in-range:

<input min="1" max="5" class="in-range:border-green-500 ..." />

fuera de rango (:fuera de rango)
Aplique estilo a una entrada cuando su valor esté fuera de un límite de rango especificado mediante el modificador out-of-range:

<input min="1" max="5" class="out-of-range:border-red-500 ..." />
​
marcador de posición mostrado (:p laceholder-shown)
Aplique estilo a una entrada cuando el marcador de posición se muestre con el modificador de placeholder-shown:

<input class="placeholder-shown:border-gray-500 ..." placeholder="you@example.com" />
​
Autocompletar (:autorrelleno)
Aplique estilo a una entrada cuando el navegador la haya rellenado automáticamente mediante el modificador de autofill:

<input class="autofill:bg-yellow-200 ..." />
​
sólo lectura (:read-only)
Aplicar estilo a una entrada cuando es de solo lectura con el modificador read-only:

<input class="read-only:bg-gray-100 ..." />