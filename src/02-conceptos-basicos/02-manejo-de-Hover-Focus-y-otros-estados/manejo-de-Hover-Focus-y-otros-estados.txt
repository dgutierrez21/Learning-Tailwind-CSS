Manejo de Hover, Focus y otros estados

Usar utilidades para aplicar estilo a los elementos al hacer hover, focus y más.

Cada clase de utilidad en Tailwind se puede aplicar condicionalmente agregando un modificador al principio del nombre de clase que describe la condición a la que desea apuntar.

Por ejemplo, para aplicar la clase bg-sky-700 al pasar el puntero, use la clase hover:bg-sky-700 bg-sky-700

...

Tailwind incluye modificadores para casi todo lo que necesitarás, incluyendo:

    ---Pseudoclases, como ::hover, ::focus, ::first-child y :required

    ---Pseudoelementos, como ::::before, ::::after, :::placeholder y :::selection

    ---Consultas de medios y características, como puntos de interrupción sensibles, modo oscuro y prefers-reduced-motion

    ---Selectores de atributos, como [[dir="rtl"]] y [open]

Estos modificadores incluso se pueden apilar para apuntar a situaciones más específicas, por ejemplo, cambiar el color de fondo en modo oscuro, en el punto de interrupción medio, al pasar el ratón:

<button class="dark:md:hover:bg-fuchsia-600 ...">
  Save changes
</button>

En esta guía, aprenderá sobre todos los modificadores disponibles en el marco, cómo usarlos con sus propias clases personalizadas e incluso cómo crear las suyas propias.

Pseudo-classes
​
Hover, focus, y active
Aplicar estilo a los elementos al desplazar, enfocar y activar con los modificadores hover, focus y active:

...

Tailwind también incluye modificadores para otros estados interactivos como ::visited, ::focus-within y más. :focus-visible

Consulte la referencia de pseudoclase para obtener una lista completa de los modificadores de pseudoclase disponibles. https://tailwindcss.com/docs/hover-focus-and-other-states#pseudo-class-reference

Primero, último, impar y par
Aplicar estilo a un elemento cuando es el primer o el último hijo utilizando el first y last modificador:

 <ul role="list" class="p-6 divide-y divide-slate-200">
      {#each people as person}
          <!-- Elimina el relleno superior/inferior del primer/último hijo -->
      <li class="flex py-4 first:pt-0 last:pb-0">
        <img class="h-10 w-10 rounded-full" src="{person.imageUrl}" alt="" />
        <div class="ml-3 overflow-hidden">
          <p class="text-sm font-medium text-slate-900">{person.name}</p>
          <p class="text-sm text-slate-500 truncate">{person.email}</p>
        </div>
      </li>
      {/each}
    </ul>

También puedes aplicar estilo a un elemento cuando es un niño par o impar usando even odd:

<table>
  <!-- ... -->
  <tbody>
    {#each people as person}
         <!-- Utilice un fondo blanco para las filas impares, y pizarra-50 para las filas pares -->
      <tr class="odd:bg-white even:bg-slate-50">
        <td>{person.name}</td>
        <td>{person.title}</td>
        <td>{person.email}</td>
      </tr>
    {/each}
  </tbody>
</table>

Tailwind también incluye modificadores para otras pseudoclases estructurales como ::only-child, ::first-of-type, :empty y más.

Consulte la referencia de pseudoclase para obtener una lista completa de los modificadores de pseudoclase disponibles. https://tailwindcss.com/docs/hover-focus-and-other-states#pseudo-class-reference

Estados del formulario
Aplicar estilos a elementos de formulario en diferentes estados mediante modificadores como required, invalid y disabled:

Intente hacer que la dirección de correo electrónico sea válida para ver cómo cambian los estilos

...

El uso de modificadores para este tipo de cosas puede reducir la cantidad de lógica condicional en sus plantillas, permitiéndole usar el mismo conjunto de clases independientemente del estado en el que se encuentre una entrada y permitiendo que el navegador aplique los estilos correctos para usted.

Tailwind también incluye modificadores para otros estados de formulario como ::read-only, ::indeterminate, :checked, y más.

Consulte la referencia de pseudoclase para obtener una lista completa de los modificadores de pseudoclase disponibles. https://tailwindcss.com/docs/hover-focus-and-other-states#disabled

Estilo basado en el estado primario (grupo-{modificador})
Cuando necesite aplicar un estilo a un elemento basado en el estado de algún elemento padre, marque el elemento padre con la clase group y use modificadores group-* como group group-hover para aplicar estilo al elemento de destino:group-*
Coloca el cursor sobre la tarjeta para ver que ambos elementos de texto cambian de color

...

Este patrón funciona con todos los modificadores de pseudoclase, por ejemplo, group-focus, group-active o group-odd.

Diferenciación de grupos anidados
Al anidar grupos, puede aplicar estilos a algo basado en el estado de un grupo primario específico dándole a ese padre un nombre de grupo único usando una clase group/{name} e incluyendo ese nombre en modificadores usando clases como group-hover/{name} group/{name}:

<ul role="list">
  {#each people as person}
    <li class="group/item hover:bg-slate-100 ...">
      <img src="{person.imageUrl}" alt="" />
      <div>
        <a href="{person.url}">{person.name}</a>
        <p>{person.title}</p>
      </div>
      <a class="group/edit invisible hover:bg-slate-200 group-hover/item:visible ..." href="tel:{person.phone}">
        <span class="group-hover/edit:text-gray-700 ...">Call</span>
        <svg class="group-hover/edit:translate-x-0.5 group-hover/edit:text-slate-500 ...">
          <!-- ... -->
        </svg>
      </a>
    </li>
  {/each}
</ul>

Los grupos se pueden nombrar como quieras y no necesitan ser configurados de ninguna manera: simplemente nombra tus grupos directamente en tu marcado y Tailwind generará automáticamente el CSS necesario.

Grupos arbitrarios
Puede crear modificadores de group-* únicos sobre la marcha proporcionando su propio selector como un valor arbitrario entre corchetes:

...

Para tener más control, puede usar el carácter & para marcar dónde debe terminar .group en el selector final en relación con el selector que está pasando:

...