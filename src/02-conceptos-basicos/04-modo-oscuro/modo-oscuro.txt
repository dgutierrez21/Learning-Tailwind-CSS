Modo oscuro
Usando Tailwind CSS para diseñar su sitio en modo oscuro.

Uso básico
Ahora que el modo oscuro es una característica de primera clase de muchos sistemas operativos, cada vez es más común diseñar una versión oscura de su sitio web para que vaya junto con el diseño predeterminado.

Para que esto sea lo más fácil posible, Tailwind incluye una variante dark que le permite diseñar su sitio de manera diferente cuando el modo oscuro está habilitado:

...

Alternar el modo oscuro manualmente
Si desea admitir la alternancia manual del modo oscuro en lugar de depender de las preferencias del sistema operativo, utilice la estrategia de class en lugar media multimedia:

tailwind.config.js
module.exports = {
  darkMode: 'class',
  // ...
}
Ahora, en lugar de que las clases dark:{class} se apliquen en función del prefers-color-scheme, se aplicarán siempre que la clase dark esté presente anteriormente en el árbol HTML.

<!-- Dark mode not enabled -->
<html>
<body>
  <!-- Will be white -->
  <div class="bg-white dark:bg-black">
    <!-- ... -->
  </div>
</body>
</html>

<!-- Dark mode enabled -->
<html class="dark">
<body>
  <!-- Will be black -->
  <div class="bg-white dark:bg-black">
    <!-- ... -->
  </div>
</body>
</html>

Si ha establecido un prefijo en su configuración de Tailwind, asegúrese de agregarlo a la clase dark. Por ejemplo, si tiene el prefijo tw-, deberá usar la clase tw- para habilitar tw-dark el modo oscuro.

Cómo agregar la clase dark al elemento html depende de usted, pero un enfoque común es usar un poco de JS que lea una preferencia de algún lugar (como localStorage) y actualice el DOM en consecuencia.

Compatibilidad con la preferencia del sistema y la selección manual
La estrategia de class se puede utilizar para admitir tanto la preferencia del sistema del usuario como un modo seleccionado manualmente mediante la API Window.matchMedia().

Aquí hay un ejemplo simple de cómo puede admitir el modo claro, el modo oscuro, así como respetar las preferencias del sistema operativo:

espaguetis.js
// Al cargar la página o al cambiar de tema, es mejor añadir en línea en `head` para evitar FOUC
if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
  document.documentElement.classList.add('dark')
} else {
  document.documentElement.classList.remove('dark')
}

// Siempre que el usuario elija explícitamente el modo luz
localStorage.theme = 'light'

// Siempre que el usuario elija explícitamente el modo oscuro
localStorage.theme = 'dark'

// Siempre que el usuario decida explícitamente respetar la preferencia del SO
localStorage.removeItem('theme')

Una vez más, puede administrar esto como desee, incluso almacenar el lado del servidor de preferencias en una base de datos y representar la clase en el servidor, depende totalmente de usted.

Personalización del nombre de la clase
Algunos marcos (como NativeScript) tienen su propio enfoque para habilitar el modo oscuro y agregar un nombre de clase diferente cuando el modo oscuro está activo.

Puede personalizar el nombre del selector de modo oscuro estableciendo darkMode en una matriz con su selector personalizado como segundo elemento:

tailwind.config.js
module.exports = {
  darkMode: ['class', '[data-mode="dark"]'],
  // ...
}